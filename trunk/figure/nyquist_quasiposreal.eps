%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 14 220 581 621 
%%
%%Scilab Postscript File (Copyright 1995-2005 J.Ph Chancelier Enpc/cermics)
%%EndComments
/saved save def 
/$pictdict 100 dict def
$pictdict begin

/dogrey
{ /Arraybox exch def
	/Arraygrey exch def
	/nargs exch def 
	/func exch cvx def
	Arraybox 0 nargs getinterval Arraygrey 0 get func 
	1 1 Arraygrey length 1 sub 
	{/i exch def
	Arraybox i nargs mul nargs getinterval 
	Arraygrey i get func
	}for
} def
%--------------------------------------------
% [x y width height] nivgris drawbox 
% si niv gris > 1.0 alors on fait un stroke 
% sans closepath 
%--------------------------------------------

/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 


/drawbox 
	{/glev exch def /Ar exch def 
	/x Ar 0 get def /y Ar 1 get def 
	/w Ar 2 get def /h Ar 3 get def 
	newpath
	x y moveto
	x w add y lineto
	x w add y h add lineto
	x y h add lineto
	glev 1 ge 
	{ % filling 
	 closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill 
		grestore}
	{ 
	  % drawing 
	  glev -1 le 
	  {
    	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax xsetgray
		 stroke grestore  }
	  { closepath stroke} ifelse 
	} ifelse
} def 

%--------------------------------------------
% [x y width height] clearzone
%--------------------------------------------
/clearzone
        {/Ar exch def
        /x Ar 0 get def /y Ar 1 get def
        /w Ar 2 get def /h Ar 3 get def
        newpath
        x y moveto
        x w add y lineto
        x w add y h add lineto
        x y h add lineto
	closepath gsave background Setcolor eofill grestore
} def

%------------------------------------------------------
% polyline stroke or polygon fill or both 
%------------------------------------------------------
/absolu true def 
/closeflag false def 

/lmin { /y exch def /x exch def x y le { x  } {  y  } ifelse } def
/lmax { /y exch def /x exch def x y le { y } {  x } ifelse } def 


/drawpoly
	{/glev exch def /Ar exch def
	newpath
	Ar 0 get Ar 1 get moveto 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get absolu {lineto} {rlineto} ifelse
	}for
	glev -1 le 
	{ % filling the polygon with current pattern ( gray or color)
	  closepath gsave glev neg 1 sub WhiteLev 2 add lmin 0 lmax Setgray eofill grestore }
	{ glev 1 ge 
	   { % drawing the polygon with current dash style or color 
	     % XXXXX : a voir c'est pas clair il faudrait sauver 
	     % and filling it with other color (glev) 
	     closepath gsave glev 1 sub WhiteLev 2 add lmin 0 lmax Setgray 
		 eofill grestore stroke }
	   {% drawing the polygon with current style 
	    closeflag {closepath} if stroke} 
	ifelse }
	ifelse 
} def 

%------------------------------------------------------
% segments non connectes 
%------------------------------------------------------

/drawsegs
	{/glev exch def /Ar exch def
	% when  b&w is used drawsegs uses dash not gray levels 
	newpath
	Ar 0 get Ar 1 get moveto Ar 2 get Ar 3 get lineto 
	gsave glev xsetgray stroke grestore
	4 4 Ar length 3 sub 
	{/i exch def
	newpath 
	Ar i get Ar i 1 add get moveto
	Ar i 2 add get Ar i 3 add get lineto 
	gsave glev xsetgray stroke grestore
	}for
} def 


%------------------------------------------------------
% unconected arrows
%-----------------------------------------------------

/drawarrows
	{/arsize10 exch def /Ar exch def
	Ar 0 get  Ar 1 get Ar 2 get Ar 3 get arsize10 drawarrow
	4 4 Ar length 3 sub 
	{/i exch def
	Ar i get Ar i 1 add get  Ar i 2 add get  Ar i 3 add get arsize10 
	drawarrow
	}for
} def 
		
/cos20 20 cos def
/sin20 20 sin def

/drawarrow                                
  { 
      /arsize exch 10 div def 
      /tipy exch def /tipx exch def       
      /taily exch def /tailx exch def
      /dx tipx tailx sub  def               
      /dy tipy taily sub  def               
      newpath tipx tipy moveto tailx taily lineto stroke   
      /norme dx dx mul dy dy mul add sqrt def 
      norme 1.e-8 ge 
	{
	arsize dx mul norme div /dx1 exch def 
	arsize dy mul norme div /dy1 exch def 
% 	2 following lines modified (correction bug 607 (bruno 18 nov 2004)) 
	/depx tipx def 
	/depy tipy def 
	newpath depx depy moveto 
	cos20 neg dx1 mul sin20 dy1 mul sub depx add
	sin20 dx1  mul cos20 dy1 mul sub depy add lineto 
	cos20 neg dx1 mul sin20 dy1 mul add  depx add
	sin20 neg dx1 mul cos20 dy1 mul sub depy add lineto closepath 
	fill
	} {} ifelse 
  } def


%------------------------------------------------------
% cercle ou portions de cercle 
% attention argument (x y w h angl1*64 angl2*64 )
% devrait tracer une ellipse a modifier donc 
%------------------------------------------------------

/fillarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat
        
        % don't fill if the color is out of colormap
        % that's the disctinction between drawArc and FillArc
	glev 1 WhiteLev add le
	{ % filling 
	newpath
	cx cy moveto 
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add  64 div neg
	 Ar 4 get 64 div neg  arc closepath
	gsave glev Setgray eofill grestore}
	{
	%drawing with current dash or color unclosed path 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	  stroke} ifelse 
	Cmsave1 setmatrix } ifelse
} def 

/drawarc
	{/glev exch def /Ar exch def
	/cx Ar 0 get Ar 2 get 2 div add def 
	/cy Ar 1 get Ar 3 get 2 div add def 
	Ar 2 get 0 eq {} {
	/hom Ar 3 get Ar 2 get div def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	%-- on change de transformation pour faire homothetie en (x,y) 
	cx cy [1 0 0 hom 0 0 ] transform
	/t1 exch neg cy add def 
	/t2 exch neg cx add def 
	[1 0 0 hom t2 t1 ] concat 
	newpath
	cx cy Ar 2 get 2 div Ar 5 get Ar 4 get add 64 div neg Ar 4 get 64 div neg arc
	closepath glev xsetgray stroke
	Cmsave1 setmatrix } ifelse
} def 


%------------------------------------------------------
% centred hard mark 
%------------------------------------------------------

% x y str ShowCString 
% on fait un show mais string est centre autour du point (x,y) 

/ShowCString { /str exch def /y exch def /x exch def 
 newpath 
 x y moveto 
 str true charpath flattenpath pathbbox 
 /y2 exch def /x2 exch def /y1 exch def /x1 exch def 
 x 2 mul x2 x1 add 2 div sub 
 y 2 mul y2 y1 add 2 div sub moveto str show 
 } def 

/drawpolymark {/glev exch def /Ar exch def 
	Ar 0 get Ar 1 get HardMark ShowCString 
	2 2 Ar length 1 sub 
	{/i exch def
	Ar i get Ar i 1 add get HardMark ShowCString
	}for
} def 

%---------------------------------------------------
% chaines de caracteres 
%---------------------------------------------------
/FBox {/Ar exch def /rot exch def /str exch def /y exch def /x exch def 
 newpath Ar 0 get Ar 1 get moveto 
	/sina rot sin def /cosa rot cos def 
	/-sina sina neg def 
	[cosa -sina sina cosa 0 0 ] CtmModif
 Ar 2 get 0 rlineto 0 Ar 3 get neg rlineto Ar 2 get neg 0 rlineto 
 0 Ar 3 get  rlineto  stroke CtmRestore 
 x y str rot ShowRotate 
 } def 

% x y str ang Showrotate 
% inverse du sens trigo 

/ShowRotate { /ang exch def /str exch def 
	/y exch def /x exch def 
	x y moveto 
	/sina ang sin def /cosa ang cos def 
	/-sina 0 sina sub def 
	[cosa -sina sina cosa 0 0 ] CtmModif
	str show 
	CtmRestore 
} def 

/HardMark (0) def 

%(Chaine de caracteres) x y flag angle [arfbox] Show

/Show { /Ar exch def 
	/rot exch def /flag exch def /y exch def /x exch def /str exch def 
	flag 1 eq 
	{x y str rot Ar FBox}
	{x y str rot ShowRotate } ifelse} def 

/L {/y2 exch def /x2 exch def /y1 exch def /x1 exch def 
    newpath x1 y1 moveto x2 y2 lineto stroke } def 

%---------------------------------------------------------
% drawing an axis 
% angle [nsep1,nsep2] ,[siz1,siz2,coeff] [x0,y0] drawaxis",
%---------------------------------------------------------

/drawaxis {/XX exch def /Arsize exch def /Arsep exch def /ang exch def 
	/Cmsave1 matrix def Cmsave1 currentmatrix pop
	/sina ang sin def /cosa ang cos def /-sina sina neg def 
	/x XX 0 get def /y XX 1 get def
	%-- on change de transformation pour tourner autour de (x,y) 
	x y [cosa sina -sina cosa 0 0 ] transform
	/t1 exch neg y add def 
	/t2 exch neg x add def 
	[cosa sina -sina cosa t2 t1 ] concat 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke 
	0 1 Arsep 1 get 1 sub
	{
	 % i don't want the value of the for indice 
	 pop
	newpath 
	x y moveto 
	0 1 Arsep 0 get 1 sub
		{
		 % i don't want the value of the for indice 
		 pop
		 Arsize 0 get 0  rlineto
		 0 Arsize 1 get rlineto 
	 	0 Arsize 1 get  neg rlineto }
		for 
	currentpoint /y exch def /x exch def 
	stroke 
	newpath x y moveto 0 Arsize 1 get Arsize 2 get mul rlineto
	stroke }
	for 
	Cmsave1 setmatrix } def 

%---------------------------------------------------------
% change and restore CTM
%---------------------------------------------------------

/CtmModif {
	/arg exch def 
	/Cmsave matrix def 
	Cmsave currentmatrix pop
	[1 0 0 -1 0 0 ] concat 
	arg concat 
} def 

/CtmRestore { Cmsave setmatrix } def 

/Thickness { /th exch def th 0 le {/th 0.1 def} if th setlinewidth} def 

/WhiteLev 15 def

/Setgray { WhiteLev div setgray} def 

/fillsolid { 0 setgray } def 

%--------------------------------------
% clip zones ( rectangle ) 
%-------------------------------------

/setclipzone {initclip 
	/h exch def /w exch def /y exch def /x exch def 
	newpath x y moveto w 0 rlineto 0 h rlineto w neg 0 rlineto 
	0 h neg rlineto closepath clip} def 

%------------------
% to change the position of a picture 
%------------------
/cm{28.346457 mul}def

/DesPosi { /YH exch def /XW exch def /YP exch def /XP exch def 
	XP cm YP cm neg translate 
	XW cm 6000 div YH cm 4240 div  scale } def 

0 setlinecap 
2 setlinejoin 
1 setlinewidth

%-- Color database 
/ColorR [0.000000 0.000000 0.000000 0.529412 0.498039 0.133333 0.000000 0.878431 0.000000 1.000000 1.000000 1.000000 0.933333 1.000000 1.000000 0.960784 1.000000 ] def
/ColorG [0.000000 0.000000 0.000000 0.807843 1.000000 0.545098 1.000000 1.000000 1.000000 0.647059 0.000000 0.000000 0.509804 1.000000 0.843137 0.960784 1.000000 ] def
/ColorB [0.000000 0.501961 1.000000 0.921569 0.831373 0.133333 0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 0.933333 0.000000 0.000000 0.862745 1.000000 ] def

/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def

% to multiply all the fontsizes by a factor  scf
/scf 1.0 def

% set dash styles : max number is hardcoded to 6 
% /DashTab [[] [20 50 20 50]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/DashTab [[]  [50 20 50 20]   [50 30 20 30]  [80 30 20 30]  [110 30 20 30]  [110 30 50 30]] def 
/Setdash {/i exch  0 lmax 5 lmin def i  DashTab i get 0 setdash } def 

% style for drawing: color gray or dash 
/xsetgray { usecolor 0 le {Setdash} {Setgray} ifelse } def 

% default value for colormode 

/usecolor 1 def 

% changing fonts encoding 

/Courier findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Courier exch definefont pop

/Times-Roman findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Roman exch definefont pop

/Times-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-Bold exch definefont pop


/Times-BoldItalic findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Times-BoldItalic exch definefont pop

/Helvetica findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica exch definefont pop

/Helvetica-Bold findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Bold exch definefont pop

/Helvetica-BoldOblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-BoldOblique exch definefont pop

/Helvetica-Oblique findfont
dup length dict begin
  {1 index /FID ne {def} {pop pop} ifelse} forall
  /Encoding ISOLatin1Encoding def
  currentdict
  end
/Helvetica-Oblique exch definefont pop

% used when extracting Latex from scilab generated text
%Latex:% MySetFigFont
%Latex:\begingroup\makeatletter\ifx\MySetFigFont\undefined%
%Latex:\gdef\MySetFigFont#1#2#3#4#5{%
%Latex:  \reset@font\fontsize{#1}{#2pt}%
%Latex:  \fontfamily{#3}\fontseries{#4}\fontshape{#5}%
%Latex:  \selectfont}%
%Latex:\fi\endgroup%
%Latex:% myput 
%Latex:\ifx\myput\undefined%
%Latex:\long\def\myput#1#2#3#4{\put(#1,#2){\makebox(0,0)[lb]{\smash{{\MySetFigFont{#3}{#3}{\familydefault}{\mddefault}{\updefault}{\color[rgb]{0,0,0}#4}}}}}}
%Latex:\fi%

%------ End Main Program ------%
% XP YP XW YW DesPosi in the following code 
% will output the picture in the rectangle defined by 
% upper left point (XP,YP) wide :XW Height: YW
% the coordinates are given in centimeter and 
% are the (0,0) point is the down-left point of the paper 



/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%scipos_w=3000
%scipos_h=2120
% Dessin en bas a gauche de taille 3000,2120
[1.889764 20 div 0 0 1.889764 20 div neg 141 10 div 6212 10 div] concat
% Init driver 
/PaintBackground {WhiteLev 2 add background eq {}{ (drawbox) 4 [background 1 add] [0 0 6000 4240] dogrey}ifelse } def
5 Thickness
% 3 setalufunction
-1 -1 200000 200000 setclipzone
[] 0 setdash
/Times-Roman findfont 100 scf mul scalefont setfont
fillsolid
[] 0 setdash
0 Setcolor
/background 33 def PaintBackground
%--use color 1 
fillsolid
[] 0 setdash
0 Setcolor
/WhiteLev 31 def
/Setgray {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/Setcolor {/i exch def ColorR i get ColorG i get ColorB i get setrgbcolor } def 
/usecolor 1 def 
%--end use color 1 
% End init driver 
/WhiteLev 31 def
/WhiteLev 31 def
/ColorR [0.000000 
0.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.529412 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 
0.564706 0.690196 0.815686 0.501961 0.627451 0.752941 1.000000 1.000000 1.000000 1.000000 
1.000000 0.0 1.0] def
/ColorG [0.000000 
0.000000 1.000000 1.000000 0.000000 0.000000 1.000000 1.000000 0.000000 0.000000 0.000000 
0.807843 0.564706 0.690196 0.815686 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.000000 0.000000 0.000000 0.188235 0.250980 0.376471 0.501961 0.627451 0.752941 0.878431 
0.843137 0.0 1.0] def
/ColorB [0.000000 
1.000000 0.000000 1.000000 0.000000 1.000000 0.000000 1.000000 0.564706 0.690196 0.815686 
1.000000 0.000000 0.000000 0.000000 0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 
0.564706 0.690196 0.815686 0.000000 0.000000 0.000000 0.501961 0.627451 0.752941 0.878431 
0.000000 0.0 1.0] def
%Latex:\setlength{\unitlength}{0.05pt}
%Latex:\begin{picture}(6000,4240)(200,0)
/background 33 def PaintBackground
/background 33 def PaintBackground
/background 33 def PaintBackground
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
33 Setcolor
 (drawpoly) 10 [ -34]
[750 530 750 3710 5250 3710 5250 530 750 530 
] dogrey 
33 Setcolor
/absolu true def
32 Setcolor
[] 0 setdash
32 Setcolor
[20 20 20 20 ] 0 setdash
 (drawsegs) 4 [ 3]
[750 3710 750 530 
] dogrey 
 (drawsegs) 4 [ 3]
[1250 3710 1250 530 
] dogrey 
 (drawsegs) 4 [ 3]
[1750 3710 1750 530 
] dogrey 
 (drawsegs) 4 [ 3]
[2250 3710 2250 530 
] dogrey 
 (drawsegs) 4 [ 3]
[2750 3710 2750 530 
] dogrey 
 (drawsegs) 4 [ 3]
[3250 3710 3250 530 
] dogrey 
 (drawsegs) 4 [ 3]
[3750 3710 3750 530 
] dogrey 
 (drawsegs) 4 [ 3]
[4250 3710 4250 530 
] dogrey 
 (drawsegs) 4 [ 3]
[4750 3710 4750 530 
] dogrey 
 (drawsegs) 4 [ 3]
[5250 3710 5250 530 
] dogrey 
[] 0 setdash
[20 20 20 20 ] 0 setdash
 (drawsegs) 4 [ 3]
[750 3710 5250 3710 
] dogrey 
 (drawsegs) 4 [ 3]
[750 3180 5250 3180 
] dogrey 
 (drawsegs) 4 [ 3]
[750 2650 5250 2650 
] dogrey 
 (drawsegs) 4 [ 3]
[750 2120 5250 2120 
] dogrey 
 (drawsegs) 4 [ 3]
[750 1590 5250 1590 
] dogrey 
 (drawsegs) 4 [ 3]
[750 1060 5250 1060 
] dogrey 
 (drawsegs) 4 [ 3]
[750 530 5250 530 
] dogrey 
[] 0 setdash
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
0 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 468 [ 0]
[1250 2112 1250 2110 1250 2107 1250 2103 1250 2099 1251 2093 1251 2089 1251 2083 1252 2074 1253 2068 
1254 2059 1255 2048 1256 2041 1258 2032 1260 2020 1263 2005 1265 1996 1268 1986 1272 1973 1277 1957 
1283 1938 1287 1927 1293 1914 1299 1900 1307 1883 1317 1864 1329 1841 1337 1828 1346 1814 1356 1798 
1368 1781 1383 1762 1400 1741 1420 1717 1445 1690 1476 1659 1494 1642 1515 1624 1538 1604 1564 1583 
1594 1561 1628 1537 1668 1511 1714 1482 1740 1468 1768 1452 1799 1436 1832 1419 1868 1402 1908 1384 
1951 1366 1999 1347 2051 1328 2109 1308 2173 1288 2245 1267 2283 1257 2324 1247 2367 1237 2412 1228 
2461 1218 2511 1209 2565 1200 2623 1192 2683 1184 2747 1177 2815 1171 2888 1166 2964 1162 3046 1160 
3132 1160 3224 1162 3321 1166 3424 1174 3533 1186 3589 1193 3647 1202 3707 1212 3768 1223 3830 1236 
3894 1250 3959 1266 4025 1284 4093 1305 4162 1327 4231 1352 4301 1379 4371 1410 4442 1443 4512 1479 
4582 1519 4651 1563 4718 1610 4782 1662 4844 1718 4873 1747 4902 1778 4929 1810 4955 1843 4979 1877 
5001 1913 5022 1949 5041 1987 5057 2027 5072 2067 5083 2109 5092 2152 5098 2196 5100 2241 5099 2287 
5095 2335 5086 2383 5073 2433 5056 2483 5033 2534 5006 2585 4973 2637 4935 2689 4890 2742 4840 2794 
4783 2846 4720 2898 4649 2948 4572 2998 4488 3046 4396 3093 4297 3137 4192 3179 4079 3219 3959 3255 
3833 3287 3700 3315 3632 3327 3562 3339 3491 3349 3419 3357 3346 3365 3272 3371 3197 3375 3121 3378 
3044 3380 2967 3380 2890 3379 2813 3375 2735 3371 2658 3364 2580 3356 2504 3346 2428 3335 2352 3322 
2278 3307 2205 3290 2133 3272 2063 3253 1995 3231 1928 3208 1864 3184 1801 3159 1742 3132 1685 3103 
1630 3074 1579 3044 1530 3012 1485 2980 1443 2947 1404 2914 1369 2880 1337 2845 1309 2810 1283 2776 
1262 2741 1243 2706 1228 2672 1216 2638 1208 2605 1202 2573 1198 2541 1198 2510 1199 2480 1203 2451 
1209 2423 1216 2397 1225 2371 1235 2347 1246 2324 1257 2303 1269 2283 1280 2263 1302 2228 1322 2198 
1337 2170 1347 2144 1349 2132 1350 2126 1350 2123 1350 2122 1350 2121 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
0 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
0 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 472 [ 0]
[1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 
1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2120 1350 2119 
1350 2118 1350 2117 1350 2114 1349 2108 1347 2096 1337 2070 1322 2042 1302 2012 1280 1977 1269 1957 
1257 1937 1246 1916 1235 1893 1225 1869 1216 1843 1209 1817 1203 1789 1199 1760 1198 1730 1198 1699 
1202 1667 1208 1635 1216 1602 1228 1568 1243 1534 1262 1499 1283 1464 1309 1430 1337 1395 1369 1360 
1404 1326 1443 1293 1485 1260 1530 1228 1579 1196 1630 1166 1685 1137 1742 1108 1801 1081 1864 1056 
1928 1032 1995 1009 2063 987 2133 968 2205 950 2278 933 2352 918 2428 905 2504 894 2580 884 
2658 876 2735 869 2813 865 2890 861 2967 860 3044 860 3121 862 3197 865 3272 869 3346 875 
3419 883 3491 891 3562 901 3632 913 3700 925 3833 953 3959 985 4079 1021 4192 1061 4297 1103 
4396 1147 4488 1194 4572 1242 4649 1292 4720 1342 4783 1394 4840 1446 4890 1498 4935 1551 4973 1603 
5006 1655 5033 1706 5056 1757 5073 1807 5086 1857 5095 1905 5099 1953 5100 1999 5098 2044 5092 2088 
5083 2131 5072 2173 5057 2213 5041 2253 5022 2291 5001 2327 4979 2363 4955 2397 4929 2430 4902 2462 
4873 2493 4844 2522 4782 2578 4718 2630 4651 2677 4582 2721 4512 2761 4442 2797 4371 2830 4301 2861 
4231 2888 4162 2913 4093 2935 4025 2956 3959 2974 3894 2990 3830 3004 3768 3017 3707 3028 3647 3038 
3589 3047 3533 3054 3424 3066 3321 3074 3224 3078 3132 3080 3046 3080 2964 3078 2888 3074 2815 3069 
2747 3063 2683 3056 2623 3048 2565 3040 2511 3031 2461 3022 2412 3012 2367 3003 2324 2993 2283 2983 
2245 2973 2173 2952 2109 2932 2051 2912 1999 2893 1951 2874 1908 2856 1868 2838 1832 2821 1799 2804 
1768 2788 1740 2772 1714 2758 1668 2729 1628 2703 1594 2679 1564 2657 1538 2636 1515 2616 1494 2598 
1476 2581 1445 2550 1420 2523 1400 2499 1383 2478 1368 2459 1356 2442 1346 2426 1337 2412 1329 2399 
1317 2376 1307 2357 1299 2340 1293 2326 1287 2313 1283 2302 1277 2283 1272 2267 1268 2254 1265 2244 
1263 2235 1260 2220 1258 2208 1256 2199 1255 2192 1254 2181 1253 2172 1252 2166 1251 2157 1251 2151 
1251 2147 1250 2141 1250 2137 1250 2133 1250 2130 1250 2128 
] dogrey 
0 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-1000) 1250 2100 0  0.00 [1250 2000 255 99] Show
%Latex:\myput{1250}{2140}{5}{-1000}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-7.252) 2412 1216 0  0.00 [2412 1116 283 99] Show
%Latex:\myput{2412}{3024}{5}{-7.252}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-5.034) 3321 1154 0  0.00 [3321 1054 283 99] Show
%Latex:\myput{3321}{3086}{5}{-5.034}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-3.754) 4231 1340 0  0.00 [4231 1240 283 99] Show
%Latex:\myput{4231}{2900}{5}{-3.754}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-2.901) 4902 1766 0  0.00 [4902 1666 283 99] Show
%Latex:\myput{4902}{2474}{5}{-2.901}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-2.218) 5073 2421 0  0.00 [5073 2321 283 99] Show
%Latex:\myput{5073}{1819}{5}{-2.218}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-1.749) 4572 2986 0  0.00 [4572 2886 283 99] Show
%Latex:\myput{4572}{1254}{5}{-1.749}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-1.408) 3700 3303 0  0.00 [3700 3203 283 99] Show
%Latex:\myput{3700}{937}{5}{-1.408}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-1.13) 2735 3359 0  0.00 [2735 3259 227 99] Show
%Latex:\myput{2735}{881}{5}{-1.13}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(-0.874) 1864 3172 0  0.00 [1864 3072 283 99] Show
%Latex:\myput{1864}{1068}{5}{-0.874}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
(0.619) 1309 1418 0  0.00 [1309 1318 250 99] Show
%Latex:\myput{1309}{2822}{5}{0.619}
750 530 4500 3180 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
[] 0 setdash
5 Thickness
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1207 2155 1293 2069 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1207 2069 1293 2155 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1207 2133 1293 2047 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1207 2047 1293 2133 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[2369 1271 2455 1185 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[2369 1185 2455 1271 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[2398 1265 2484 1179 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[2398 1179 2484 1265 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[3278 1209 3364 1123 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[3278 1123 3364 1209 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[3308 1212 3394 1126 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[3308 1126 3394 1212 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4188 1395 4274 1309 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4188 1309 4274 1395 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4214 1405 4300 1319 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4214 1319 4300 1405 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4859 1821 4945 1735 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4859 1735 4945 1821 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4874 1839 4960 1753 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4874 1753 4960 1839 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[5030 2476 5116 2390 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[5030 2390 5116 2476 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[5023 2496 5109 2410 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[5023 2410 5109 2496 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4529 3041 4615 2955 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4529 2955 4615 3041 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[4506 3054 4592 2968 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[4506 2968 4592 3054 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[3657 3358 3743 3272 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[3657 3272 3743 3358 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[3628 3363 3714 3277 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[3628 3277 3714 3363 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[2692 3414 2778 3328 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[2692 3328 2778 3414 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[2662 3411 2748 3325 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[2662 3325 2748 3411 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1821 3227 1907 3141 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1821 3141 1907 3227 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1795 3217 1881 3131 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1795 3131 1881 3217 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1266 1473 1352 1387 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1266 1387 1352 1473 
] dogrey 
32 Setcolor
/absolu true def
32 Setcolor
/closeflag false def
 (drawpoly) 4 [ 0]
[1281 1454 1367 1368 
] dogrey 
32 Setcolor
/absolu true def
/closeflag false def
 (drawpoly) 4 [ 0]
[1281 1368 1367 1454 
] dogrey 
32 Setcolor
/absolu true def
[] 0 setdash
5 Thickness
32 Setcolor
32 Setcolor
5 Thickness
[] 0 setdash
[] 0 setdash
32 Setcolor
 (drawarrows) 44 [ 34]
[1250 2112 1250 2090 2412 1228 2441 1222 3321 1166 3351 1169 4231 1352 4257 1362 4902 1778 4917 1796 
5073 2433 5066 2453 4572 2998 4549 3011 3700 3315 3671 3320 2735 3371 2705 3368 1864 3184 1838 3174 
1309 1430 1324 1411 
] dogrey 
[] 0 setdash
32 Setcolor
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[750 2120 5250 2120 
] dogrey 
32 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
750 530 4500 3180 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
/closeflag false def
 (drawpoly) 4 [ 0]
[1250 3710 1250 530 
] dogrey 
32 Setcolor
/absolu true def
-1 -1 200000 200000 setclipzone
32 Setcolor
5 Thickness
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(-5) 706 3873 0  0.00 [706 3773 88 99] Show
%Latex:\myput{706}{367}{5}{-5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(0) 1223 3873 0  0.00 [1223 3773 55 99] Show
%Latex:\myput{1223}{367}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1250 3710 1250 3773 
] dogrey 
32 Setcolor
32 Setcolor
(5) 1723 3873 0  0.00 [1723 3773 55 99] Show
%Latex:\myput{1723}{367}{5}{5}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[1750 3710 1750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(10) 2195 3873 0  0.00 [2195 3773 111 99] Show
%Latex:\myput{2195}{367}{5}{10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2250 3710 2250 3773 
] dogrey 
32 Setcolor
32 Setcolor
(15) 2695 3873 0  0.00 [2695 3773 111 99] Show
%Latex:\myput{2695}{367}{5}{15}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[2750 3710 2750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(20) 3195 3873 0  0.00 [3195 3773 111 99] Show
%Latex:\myput{3195}{367}{5}{20}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3250 3710 3250 3773 
] dogrey 
32 Setcolor
32 Setcolor
(25) 3695 3873 0  0.00 [3695 3773 111 99] Show
%Latex:\myput{3695}{367}{5}{25}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[3750 3710 3750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(30) 4195 3873 0  0.00 [4195 3773 111 99] Show
%Latex:\myput{4195}{367}{5}{30}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4250 3710 4250 3773 
] dogrey 
32 Setcolor
32 Setcolor
(35) 4695 3873 0  0.00 [4695 3773 111 99] Show
%Latex:\myput{4695}{367}{5}{35}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[4750 3710 4750 3773 
] dogrey 
32 Setcolor
32 Setcolor
(40) 5195 3873 0  0.00 [5195 3773 111 99] Show
%Latex:\myput{5195}{367}{5}{40}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[5250 3710 5250 3773 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1000 3710 1000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1250 3710 1250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1500 3710 1500 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[1750 3710 1750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2000 3710 2000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2250 3710 2250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2500 3710 2500 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[2750 3710 2750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3000 3710 3000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3250 3710 3250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3500 3710 3500 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[3750 3710 3750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4000 3710 4000 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4250 3710 4250 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4500 3710 4500 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[4750 3710 4750 3757 
] dogrey 
 (drawsegs) 4 [ 32]
[5000 3710 5000 3757 
] dogrey 
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(-30) 534 3748 0  0.00 [534 3648 144 99] Show
%Latex:\myput{534}{492}{5}{-30}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 690 3710 
] dogrey 
32 Setcolor
32 Setcolor
(-20) 534 3218 0  0.00 [534 3118 144 99] Show
%Latex:\myput{534}{1022}{5}{-20}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3180 690 3180 
] dogrey 
32 Setcolor
32 Setcolor
(-10) 534 2688 0  0.00 [534 2588 144 99] Show
%Latex:\myput{534}{1552}{5}{-10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2650 690 2650 
] dogrey 
32 Setcolor
32 Setcolor
(0) 623 2158 0  0.00 [623 2058 55 99] Show
%Latex:\myput{623}{2082}{5}{0}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 2120 690 2120 
] dogrey 
32 Setcolor
32 Setcolor
(10) 567 1628 0  0.00 [567 1528 111 99] Show
%Latex:\myput{567}{2612}{5}{10}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1590 690 1590 
] dogrey 
32 Setcolor
32 Setcolor
(20) 567 1098 0  0.00 [567 998 111 99] Show
%Latex:\myput{567}{3142}{5}{20}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 1060 690 1060 
] dogrey 
32 Setcolor
32 Setcolor
(30) 567 568 0  0.00 [567 468 111 99] Show
%Latex:\myput{567}{3672}{5}{30}
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 530 690 530 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 705 3710 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3578 705 3578 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3445 705 3445 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3313 705 3313 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3180 705 3180 
] dogrey 
 (drawsegs) 4 [ 32]
[750 3048 705 3048 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2915 705 2915 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2783 705 2783 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2650 705 2650 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2518 705 2518 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2385 705 2385 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2253 705 2253 
] dogrey 
 (drawsegs) 4 [ 32]
[750 2120 705 2120 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1988 705 1988 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1855 705 1855 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1723 705 1723 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1590 705 1590 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1458 705 1458 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1325 705 1325 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1193 705 1193 
] dogrey 
 (drawsegs) 4 [ 32]
[750 1060 705 1060 
] dogrey 
 (drawsegs) 4 [ 32]
[750 928 705 928 
] dogrey 
 (drawsegs) 4 [ 32]
[750 795 705 795 
] dogrey 
 (drawsegs) 4 [ 32]
[750 663 705 663 
] dogrey 
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 5250 3710 
] dogrey 
32 Setcolor
32 Setcolor
 (drawsegs) 4 [ 32]
[750 3710 750 530 
] dogrey 
32 Setcolor
 (drawbox) 4 [ 0]
[750 530 4500 3180 
] dogrey 
32 Setcolor
[] 0 setdash
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Nyquist plot ) 2724 292 0  0.00 [2724 192 550 99] Show
%Latex:\myput{2724}{3948}{5}{Nyquist plot }
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Re\(h\(2i*pi*f\)\)) 2712 4063 0  0.00 [2712 3963 577 99] Show
%Latex:\myput{2712}{177}{5}{Re(h(2i*pi*f))}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
32 Setcolor
(Im\(h\(2i*pi*f\)\)) 470 2379 0 270.00 [470 2279 561 99] Show
%Latex:\myput{470}{1861}{5}{Im(h(2i*pi*f))}
32 Setcolor
/Helvetica findfont 100 scf mul scalefont setfont
%Latex:\end{picture}
 showpage

 end saved restore 


